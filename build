#!/bin/env bash

# configurable variables
executableFile=compiler
buildDirectory=buildDirectory
src=src

# polymorphic functions
compile() {
  if [[ ! -d $buildDirectory ]]; then
    echo -e "\033[33m-> create build dir\033[0m"
    mkdir $buildDirectory
  fi
  objectFileList=""
  changesDetected=""
  # compile object files if changes detected
  echo -e "\033[33m-> compiling object files\033[0m"
  for file in $(ls $src); do
    if [[ "$file" =~ $".c" ]]; then
      if [[ ! -f "$buildDirectory/$file.hash" ]] || [[ "$(cat "$buildDirectory/$file.hash")" != "$(sha512sum "$src/$file")" ]]; then
        echo -e "\033[33m-> Generating Object file : $file.o\033[0m"
        echo -e "\033[33m-> gcc -c $src/$file -o $buildDirectory/$file.o\033[0m"
        val=$(gcc -c $src/$file -o $buildDirectory/$file.o 1>&2 >/dev/tty)
        if [[ $val == "" ]]; then
          echo -e "\033[33m-> Generating Hash\033[0m"
          sha512sum "$src/$file" >"$buildDirectory/$file.hash"
        else
          echo -e "\e[31m-> Object Generation Failed : $file.o \e[0m"
          exit -1
        fi
        changesDetected="true"
      else
        echo -e "\033[33m-> No Changes Detected Skipping Object File Generation : $file\033[0m"
      fi
      objectFileList="$objectFileList $buildDirectory/$file.o"
    fi
  done
  if [[ "$changesDetected" == "true" ]]; then
    echo -e "\033[33m-> compiling executable : linking files\033[0m"
    linkingCommand="gcc $objectFileList -o $buildDirectory/$executableFile"
    echo -e "\033[33m-> running : $linkingCommand\033[0m"
    val=$($linkingCommand 1>&2 >/dev/tty)
    if [[ $val != "" ]]; then
      echo -e "\e[31m-> linking failed : $file.o \e[0m"
      exit -1
    fi
  else
    echo -e "\033[33m-> No Changes detect linking skipped\033[0m"
  fi
  echo -e "\033[33m-> compilation complete\033[0m"
}

run() {
  changesDetected=""
  for file in $(ls $src); do
    if [[ ! -f "$buildDirectory/$file.hash" ]] || [[ "$(cat "$buildDirectory/$file.hash")" != "$(sha512sum "$src/$file")" ]]; then
      changesDetected="true"
    fi
  done
  if [[ ! -f "$buildDirectory/$executableFile" ]] || [[ changesDetected == "true" ]]; then
    compile
  fi
  echo -e "\033[33m-> running\033[0m"
  $buildDirectory/$executableFile
}

clean() {
  echo -e "\033[33m-> cleaning\033[0m"
  if [[ -d $buildDirectory ]]; then
    rm -r $buildDirectory
  fi
}

# Code Below is responsible for generating and cleaning symlink as well as making the function callable ################
########################################################################################################################

# non configurable variables
absoluteFilePath="$(realpath $0)"
absoluteFileName="$(echo $absoluteFilePath | rev | grep -o "[^/]*" | head -1 | rev)"
symlinkFileName="$(echo $0 | rev | grep -o "[^/]*" | head -1 | rev)"
scriptDirectory="$(realpath build | rev | grep -o "/.*" | rev)"
symlinkFilePath="$scriptDirectory$symlinkFileName"
# grep all the function present inside the script
# that strictly follows variable names
functionNames=($(cat $absoluteFileName | pcregrep -o -M '#*.*\n[a-zA-Z0-9][a-zA-Z0-9]*[(]' | sed 'N;s/#.*private\n.*//g' | sed 's/(//g' | grep -o "^[a-zA-Z0-9].*"))
# move to script directory
cd $scriptDirectory

if [[ $symlinkFilePath == $absoluteFilePath ]]; then
  # remove deleted function symlinks
  for file in $(ls); do
    if [[ -f $file ]] && [[ $file != $absoluteFileName ]] && [[ "$(realpath $file | rev | grep -o "[^/]*" | head -1 | rev)" == $absoluteFileName ]] && [[ ! ${functionNames[*]} =~ "$file" ]]; then
      echo -e "\033[33m-> rm $file -> $(realpath $file)\033[0m"
      rm $file
    fi
  done
  # create new symlinks
  for function in ${functionNames[@]}; do
    if [[ ! -f $function ]] && [[ $function != "" ]]; then
      echo -e "\033[33m-> creating symlink : \"$function\" -> $absoluteFileName\033[0m"
      ln -s $absoluteFilePath "$scriptDirectory$function"
      chmod +x "$scriptDirectory$function"
    fi
  done
  echo -e "\033[33m-> these function are callable : ${functionNames[@]}\033[0m"
  exit
fi

# this code should be at the bottom of the file
if [[ $symlinkFilePath != $absoluteFilePath ]]; then
  if [[ ! "${functionNames[*]}" =~ $symlinkFileName ]]; then
    echo -e "\033[33m-> function not found : $symlinkFileName\033[0m"
    echo -e "\033[33m-> cleaning Symlink\033[0m"
    rm $symlinkFilePath
  else
    $symlinkFileName $@
  fi
fi
